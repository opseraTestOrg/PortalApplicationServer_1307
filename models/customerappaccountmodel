var mongoose = require('mongoose');
var Schema = mongoose.Schema;
var bcrypt = require('bcrypt');


var userToolSchema = new Schema({
    userToolName: {type: String },
    userToolAccountStatus: {type: String }
},{ _id : false });

var toolConfiguration = new Schema({
    configurationName : String,
    configurationValue : String
},{_id : false });

var toolsSchema = new Schema({
    toolName : String,
    exposedPort : String,
    toolContainerId: String,
    toolsConfigurationList : [mongoose.Schema.Types.Mixed]
},{_id : false});

var applicationSchema = new Schema({
    applicationId : String,
    applicationName :String,
    isEncryptionEnabled : Boolean,
    baseUrl : String,
    instanceId :String,
    bundleName : String,
    toolsList : [mongoose.Schema.Types.Mixed],
    keyPairValue : String,
},{_id : false});

var customerDetails = new Schema({
    firstName: {type: String },
    lastName: {type: String },
    emailId: {type: String },     
    address: {type: String },   
    zip: {type: String },
    state: {type: String } ,
    primaryContactEmail: {type: String },    
    primaryContactPhone: {type: String },
    secondaryContactEmail: {type: String },    
    secondaryContactPhone: {type: String },
},{ _id : false });

var customerSchema = new Schema({
    customerUniqueId : {type: String },
    customerDetails : customerDetails,
    loginId: {type: String, required: false},
    loginPassword: {type: String, required: false},
    organizationName: {type: String },
    applications : [applicationSchema]
});

customerSchema.methods.generateHash = function(password){
     return bcrypt.hashSync(password, bcrypt.genSaltSync(8), null);
}

customerSchema.methods.validatePassword = function(password){
    return bcrypt.compareSync(password, this.loginPassword);
}

customerSchema.methods.toJSON = function() {
    var obj = this.toObject()
    
    delete obj.loginPassword;
    return obj
};

module.exports = mongoose.model('customerappaccountcollection', customerSchema);